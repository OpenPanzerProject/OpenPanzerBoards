Open Panzer TCB (ATmega2560) - Fuse Notes

This describes all three fuse bytes and why we've set them the way we have for the Open Panzer TCB. 
For a handy fuse calculator, see: http://www.engbedded.com/fusecalc/

REMEMBER: FUSE BITS ARE VERY CONFUSING! 
1 = "not programmed"
0 = "programmed" (aka, set)


Ext.Fuse    0xFD                      Note: If you read fuses, this one may read 0x05, which is FINE. It is the same thing since only the last three bits are actually important. 
                  7:3         - 11111 These bits do nothing, but we'll just set them to 1 (1 = not programmed)
                  BODLEVEL2:0 - 101   Set the brown-out detection voltage (page 373 of ATmega2560 datasheet). This sets it to 2.7v typical, 
                                      which is appropriate for a 5v system. 
High Fuse   0xDA  
                  OCDEN       - 1     leave disabled (by writing 1 to it)
                  JTAGEN      - 1     leave disabled (by writing 1 to it)
                  SPIEN       - 0     Serial Peripheral Interface enable - yes, we want this enabled, it allows us to write flash and EEPROM over serial (enable by setting 0)
                  WDTON       - 1     We don't need the watchdog timer on
                  EESAVE      - 1     If enabled, this would preserve EEPROM even on a chip erase command. However we would like to be able to erase EEPROM that way so leave it disabled (1)     
                  BOOTSZ1:0   - 01    Bootsize = 2,048 Words (4,096 bytes) Page 331 ATmega2560 datasheet. Bootloader can't exceed 8Kb, ours is a tad over 2k so we reserve 4k.
                  BOOTRST     - 0     Boot Reset vector enabled (write 0). This confusingly-named bit tells the CPU to start executing code not at address 0
                                      but instead at whatever the bootloader address is set to in the makefile. This is usually some area at the very high end
                                      of the flash memory where the bootloader is stashed. BOOTSZ1:0 reserved the area for the bootloader, so the starting address should
                                      be total flash (262,144) minus how many bytes we reserved for the bootloader - in our case 4,096 bytes, so the starting address
                                      for our bootloader will be 262144 - 4096 = 258048 or in hex: 0x3E000. That is important to know because we need to set it in 
                                      both our optcb2560_boot.c and Makefile when we compile the bootloader. 
Low Fuse     0xF7  
                  CKDIV8      - 1     Clock divided by 8 - not set
                  CKOUT       - 1     Clock output - not set
                  SUT1:1      - 11    Startup time = 16K CK, slowly rising power. SUT1:0 bits cleared (by writing 1)
                  CKSEL3:0    - 0111  Full-swing crystal oscillator (only CKSEL3 set with 0, CKSEL2:0 cleared with 1). The stock Arduino Mega has this set to low-power crystal, but
                                      we are using a different crystal than the Mega, and in testing we get much more stable serial communication at high baud rates with the extra power
                                      used with the full-swing option. 
Unlock Bits  0x3F
                  7:6         - 11    These bits do nothing
                  BLB12:11    - 11    Unlock the Boot Loader Section so we can write to it. 
                  BLB02:01    - 11    Unloack the Application Section although we won't be doing anything with it to flash the bootloader
                  LB2:1       - 11    No memory lock features enabled (we will allow future operations, don't brick the chip!) 
Lock Bits    0x0F
                  7:6         - 00    These bits do nothing
                  BLB12:11    - 00    Lock the Boot Loader Section. We can't write to it from SPI and the Application Section can't read from it. 
                  BLB02:01    - 11    No restrictions accessing the Application section
                  LB2:1       - 11    No memory lock features enabled (we will allow future operations)

